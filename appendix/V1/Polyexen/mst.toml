[info]
num_rows = 4096
p = 21888242871839275222246405745257275088548364400416034343698204186575808495617

[info.challenges]

[columns.public]
i00 = { aliases = [] }

[columns.fixed]
f00 = { aliases = [] }
f01 = { aliases = [] }
f02 = { aliases = [] }
f03 = { aliases = [] }
f04 = { aliases = ["LOOKUP_MAXBITS_RANGE"] }
s00 = { aliases = [] }
s01 = { aliases = [] }
s02 = { aliases = [] }
s03 = { aliases = [] }
s04 = { aliases = [] }
s05 = { aliases = [] }
s00 = { aliases = [] }
s01 = { aliases = [] }
s02 = { aliases = [] }
s03 = { aliases = [] }
s04 = { aliases = [] }
s05 = { aliases = [] }
s06 = { aliases = [] }
s07 = { aliases = [] }
s08 = { aliases = [] }

[columns.witness]
w00 = { phase = 0, aliases = [] }
w01 = { phase = 0, aliases = [] }
w02 = { phase = 0, aliases = [] }

[constraints.polys."full round 0 -> "]
c = "s02*(-w00[1] + 0x66f6f85d6f68a85ec10345351a23a3aaf07f38af8c952a7bceca70bd2af7ad5*(w00 + f00)^5 + 0x2b9d4b4110c9ae997782e1509b1d0fdb20a7c02bbd8bea7305462b9f8125b1e8*(w01 + f01)^5)"
[constraints.polys."full round 1 -> "]
c = "s02*(-w01[1] + 0xcc57cdbb08507d62bf67a4493cc262fb6c09d557013fff1f573f431221f8ff9*(w00 + f00)^5 + 0x1274e649a32ed355a31a6ed69724e1adade857e86eb5c3a121bcd147943203c8*(w01 + f01)^5)"
[constraints.polys."partial rounds 0 -> "]
c = "s03*(-w02 + (w00 + f00)^5)"
[constraints.polys."partial rounds 1 -> "]
c = "s03*(-(0x13abec390ada7f4370819ab1c7846f210554569d9b29d1ea8dbebd0fa8c53e66*w00[1] + 0x1eb9e1dc19a33a624c9862a1d97d1510bd521ead5dfe0345aaf6185b1a1e60fe*w01[1]) + (f02 + 0x66f6f85d6f68a85ec10345351a23a3aaf07f38af8c952a7bceca70bd2af7ad5*w02 + 0x2b9d4b4110c9ae997782e1509b1d0fdb20a7c02bbd8bea7305462b9f8125b1e8*(w01 + f01))^5)"
[constraints.polys."partial rounds 2 -> "]
c = "s03*(f03 - (0xfc1c9394db89bb2601abc49fdad4f038ce5169030a2ad69763f7875036bcb02*w00[1] + 0x16a9e98c493a902b9502054edc03e7b22b7eac34345961bc8abced6bd147c8be*w01[1]) + 0xcc57cdbb08507d62bf67a4493cc262fb6c09d557013fff1f573f431221f8ff9*w02 + 0x1274e649a32ed355a31a6ed69724e1adade857e86eb5c3a121bcd147943203c8*(w01 + f01))"
[constraints.polys."pad-and-add 0 -> "]
c = "s01*(1 - s01)*(2 - s01)*(4 - s01)*(w00[-1] + w00 - w00[1])"
[constraints.polys."pad-and-add 1 -> "]
c = "s01*(1 - s01)*(2 - s01)*(4 - s01)*(w01[-1] - w01[1])"
[constraints.polys."full round 0 -> "]
c = "s04*(-w00[1] + 0x66f6f85d6f68a85ec10345351a23a3aaf07f38af8c952a7bceca70bd2af7ad5*(w00 + f00)^5 + 0x2b9d4b4110c9ae997782e1509b1d0fdb20a7c02bbd8bea7305462b9f8125b1e8*(w01 + f01)^5)"
[constraints.polys."full round 1 -> "]
c = "s04*(-w01[1] + 0xcc57cdbb08507d62bf67a4493cc262fb6c09d557013fff1f573f431221f8ff9*(w00 + f00)^5 + 0x1274e649a32ed355a31a6ed69724e1adade857e86eb5c3a121bcd147943203c8*(w01 + f01)^5)"
[constraints.polys."partial rounds 0 -> "]
c = "s05*(-w02 + (w00 + f00)^5)"
[constraints.polys."partial rounds 1 -> "]
c = "s05*(-(0x13abec390ada7f4370819ab1c7846f210554569d9b29d1ea8dbebd0fa8c53e66*w00[1] + 0x1eb9e1dc19a33a624c9862a1d97d1510bd521ead5dfe0345aaf6185b1a1e60fe*w01[1]) + (f02 + 0x66f6f85d6f68a85ec10345351a23a3aaf07f38af8c952a7bceca70bd2af7ad5*w02 + 0x2b9d4b4110c9ae997782e1509b1d0fdb20a7c02bbd8bea7305462b9f8125b1e8*(w01 + f01))^5)"
[constraints.polys."partial rounds 2 -> "]
c = "s05*(f03 - (0xfc1c9394db89bb2601abc49fdad4f038ce5169030a2ad69763f7875036bcb02*w00[1] + 0x16a9e98c493a902b9502054edc03e7b22b7eac34345961bc8abced6bd147c8be*w01[1]) + 0xcc57cdbb08507d62bf67a4493cc262fb6c09d557013fff1f573f431221f8ff9*w02 + 0x1274e649a32ed355a31a6ed69724e1adade857e86eb5c3a121bcd147943203c8*(w01 + f01))"
[constraints.polys."pad-and-add 0 -> "]
c = "s01*(1 - s01)*(2 - s01)*(3 - s01)*(w00[-1] + w00 - w00[1])"
[constraints.polys."pad-and-add 1 -> "]
c = "s01*(1 - s01)*(2 - s01)*(3 - s01)*(w01[-1] - w01[1])"
[constraints.polys."bool constraint 0 -> "]
c = "s01*w02*(2 - s01)*(3 - s01)*(4 - s01)*(1 - w02)"
[constraints.polys."swap constraint 0 -> "]
c = "s01*(2 - s01)*(3 - s01)*(4 - s01)*(w00 - w00[1] + w02*(w01 - w00))"
[constraints.polys."swap constraint 1 -> "]
c = "s01*(2 - s01)*(3 - s01)*(4 - s01)*(w01 - w01[1] + w02*(w00 - w01))"
[constraints.polys."sum constraint 0 -> "]
c = "s01*(1 - s01)*(3 - s01)*(4 - s01)*(w00 + w01 - w02)"
[constraints.polys."sum constraint 1 -> "]
c = "s01*(1 - s01)*(3 - s01)*(4 - s01)*(w00 + w01 - w02)"

[constraints.lookups."range u8 check for difference between each interstitial running sum output"]
l = [
  ["s00*(w00 - w00[1]*2^8)",
   "LOOKUP_MAXBITS_RANGE"],
]


[[constraints.copys]]
columns = ["f02", "w00"]
offsets = [
 [0, 2],
 [123, 125],
 [246, 250],
 [247, 255],
 [248, 260],
 [249, 265],
 [250, 271],
 [432, 434],
 [595, 599],
 [596, 604],
 [597, 610],
 [771, 773],
 [934, 938],
 [935, 943],
 [936, 949],
 [1110, 1112],
 [1273, 1277],
 [1274, 1282],
 [1275, 1288],
]
[[constraints.copys]]
columns = ["w01", "w00"]
offsets = [
 [267, 245],
 [606, 594],
 [945, 933],
 [1284, 1272],
]
[[constraints.copys]]
columns = ["w00", "w02"]
offsets = [
 [273, 269],
 [313, 270],
 [516, 432],
 [556, 433],
 [608, 269],
 [609, 270],
 [612, 608],
 [652, 609],
 [855, 771],
 [895, 772],
 [947, 608],
 [948, 609],
 [951, 947],
 [991, 948],
 [1194, 1110],
 [1234, 1111],
 [1286, 947],
 [1287, 948],
 [1290, 1286],
 [1330, 1287],
]
[[constraints.copys]]
columns = ["w00", "w00"]
offsets = [
 [3, 2],
 [4, 0],
 [6, 5],
 [43, 42],
 [46, 45],
 [83, 82],
 [86, 85],
 [126, 125],
 [127, 123],
 [129, 128],
 [166, 165],
 [169, 168],
 [206, 205],
 [209, 208],
 [267, 122],
 [272, 271],
 [275, 274],
 [312, 311],
 [315, 314],
 [352, 351],
 [353, 268],
 [355, 354],
 [392, 391],
 [395, 394],
 [435, 434],
 [438, 437],
 [475, 474],
 [478, 477],
 [515, 514],
 [518, 517],
 [555, 554],
 [558, 557],
 [606, 431],
 [611, 610],
 [614, 613],
 [651, 650],
 [654, 653],
 [691, 690],
 [692, 607],
 [694, 693],
 [731, 730],
 [734, 733],
 [774, 773],
 [777, 776],
 [814, 813],
 [817, 816],
 [854, 853],
 [857, 856],
 [894, 893],
 [897, 896],
 [945, 770],
 [950, 949],
 [953, 952],
 [990, 989],
 [993, 992],
 [1030, 1029],
 [1031, 946],
 [1033, 1032],
 [1070, 1069],
 [1073, 1072],
 [1113, 1112],
 [1116, 1115],
 [1153, 1152],
 [1156, 1155],
 [1193, 1192],
 [1196, 1195],
 [1233, 1232],
 [1236, 1235],
 [1284, 1109],
 [1289, 1288],
 [1292, 1291],
 [1329, 1328],
 [1332, 1331],
 [1369, 1368],
 [1370, 1285],
 [1372, 1371],
 [1409, 1408],
 [1412, 1411],
]
[[constraints.copys]]
columns = ["w00", "w01"]
offsets = [
 [44, 0],
 [84, 1],
 [167, 123],
 [207, 124],
 [246, 0],
 [251, 123],
 [256, 1],
 [261, 124],
 [269, 0],
 [270, 1],
 [393, 268],
 [436, 432],
 [476, 433],
 [595, 432],
 [600, 433],
 [732, 607],
 [775, 771],
 [815, 772],
 [934, 771],
 [939, 772],
 [1071, 946],
 [1114, 1110],
 [1154, 1111],
 [1273, 1110],
 [1278, 1111],
 [1410, 1285],
]
[[constraints.copys]]
columns = ["w02", "w00"]
offsets = [
 [267, 266],
 [606, 605],
 [945, 944],
 [1284, 1283],
]
[[constraints.copys]]
columns = ["w02", "i00"]
offsets = [
 [1286, 2],
 [1287, 3],
]
[[constraints.copys]]
columns = ["w00", "i00"]
offsets = [
 [122, 0],
 [1448, 1],
]
[[constraints.copys]]
columns = ["f02", "w01"]
offsets = [
 [1, 2],
 [124, 125],
 [251, 271],
 [433, 434],
 [598, 610],
 [772, 773],
 [937, 949],
 [1111, 1112],
 [1276, 1288],
]
[[constraints.copys]]
columns = ["w01", "w01"]
offsets = [
 [3, 2],
 [6, 5],
 [43, 42],
 [46, 45],
 [83, 82],
 [86, 85],
 [126, 125],
 [129, 128],
 [166, 165],
 [169, 168],
 [206, 205],
 [209, 208],
 [269, 123],
 [270, 124],
 [272, 271],
 [275, 274],
 [312, 311],
 [315, 314],
 [352, 351],
 [355, 354],
 [392, 391],
 [395, 394],
 [435, 434],
 [438, 437],
 [475, 474],
 [478, 477],
 [515, 514],
 [518, 517],
 [555, 554],
 [558, 557],
 [608, 432],
 [609, 433],
 [611, 610],
 [614, 613],
 [651, 650],
 [654, 653],
 [691, 690],
 [694, 693],
 [731, 730],
 [734, 733],
 [774, 773],
 [777, 776],
 [814, 813],
 [817, 816],
 [854, 853],
 [857, 856],
 [894, 893],
 [897, 896],
 [947, 771],
 [948, 772],
 [950, 949],
 [953, 952],
 [990, 989],
 [993, 992],
 [1030, 1029],
 [1033, 1032],
 [1070, 1069],
 [1073, 1072],
 [1113, 1112],
 [1116, 1115],
 [1153, 1152],
 [1156, 1155],
 [1193, 1192],
 [1196, 1195],
 [1233, 1232],
 [1236, 1235],
 [1286, 1110],
 [1287, 1111],
 [1289, 1288],
 [1292, 1291],
 [1329, 1328],
 [1332, 1331],
 [1369, 1368],
 [1372, 1371],
 [1409, 1408],
 [1412, 1411],
]
